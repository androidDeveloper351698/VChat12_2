package com.vince.vchat12.data;

import java.util.List;
import com.vince.vchat12.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "MSG_DATA".
 */
public class MsgData {

    private String objectId;
    private Integer type;
    private Integer status;
    private String content;
    private String attachmentLink;
    private Boolean isGroupChat;
    private java.util.Date updateTime;
    private String senderPointer;
    private String receiverPointer;
    private String receiverGroupRelation;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MsgDataDao myDao;

    private FriendData o2o_senderPointer;
    private String o2o_senderPointer__resolvedKey;

    private FriendData o2o_receiverPointer;
    private String o2o_receiverPointer__resolvedKey;

    private List<FriendData> o2m_receiverGroupRelation;

    public MsgData() {
    }

    public MsgData(String objectId) {
        this.objectId = objectId;
    }

    public MsgData(String objectId, Integer type, Integer status, String content, String attachmentLink, Boolean isGroupChat, java.util.Date updateTime, String senderPointer, String receiverPointer, String receiverGroupRelation) {
        this.objectId = objectId;
        this.type = type;
        this.status = status;
        this.content = content;
        this.attachmentLink = attachmentLink;
        this.isGroupChat = isGroupChat;
        this.updateTime = updateTime;
        this.senderPointer = senderPointer;
        this.receiverPointer = receiverPointer;
        this.receiverGroupRelation = receiverGroupRelation;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMsgDataDao() : null;
    }

    public String getObjectId() {
        return objectId;
    }

    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getAttachmentLink() {
        return attachmentLink;
    }

    public void setAttachmentLink(String attachmentLink) {
        this.attachmentLink = attachmentLink;
    }

    public Boolean getIsGroupChat() {
        return isGroupChat;
    }

    public void setIsGroupChat(Boolean isGroupChat) {
        this.isGroupChat = isGroupChat;
    }

    public java.util.Date getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(java.util.Date updateTime) {
        this.updateTime = updateTime;
    }

    public String getSenderPointer() {
        return senderPointer;
    }

    public void setSenderPointer(String senderPointer) {
        this.senderPointer = senderPointer;
    }

    public String getReceiverPointer() {
        return receiverPointer;
    }

    public void setReceiverPointer(String receiverPointer) {
        this.receiverPointer = receiverPointer;
    }

    public String getReceiverGroupRelation() {
        return receiverGroupRelation;
    }

    public void setReceiverGroupRelation(String receiverGroupRelation) {
        this.receiverGroupRelation = receiverGroupRelation;
    }

    /** To-one relationship, resolved on first access. */
    public FriendData getO2o_senderPointer() {
        String __key = this.senderPointer;
        if (o2o_senderPointer__resolvedKey == null || o2o_senderPointer__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FriendDataDao targetDao = daoSession.getFriendDataDao();
            FriendData o2o_senderPointerNew = targetDao.load(__key);
            synchronized (this) {
                o2o_senderPointer = o2o_senderPointerNew;
            	o2o_senderPointer__resolvedKey = __key;
            }
        }
        return o2o_senderPointer;
    }

    public void setO2o_senderPointer(FriendData o2o_senderPointer) {
        synchronized (this) {
            this.o2o_senderPointer = o2o_senderPointer;
            senderPointer = o2o_senderPointer == null ? null : o2o_senderPointer.getObjectId();
            o2o_senderPointer__resolvedKey = senderPointer;
        }
    }

    /** To-one relationship, resolved on first access. */
    public FriendData getO2o_receiverPointer() {
        String __key = this.receiverPointer;
        if (o2o_receiverPointer__resolvedKey == null || o2o_receiverPointer__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FriendDataDao targetDao = daoSession.getFriendDataDao();
            FriendData o2o_receiverPointerNew = targetDao.load(__key);
            synchronized (this) {
                o2o_receiverPointer = o2o_receiverPointerNew;
            	o2o_receiverPointer__resolvedKey = __key;
            }
        }
        return o2o_receiverPointer;
    }

    public void setO2o_receiverPointer(FriendData o2o_receiverPointer) {
        synchronized (this) {
            this.o2o_receiverPointer = o2o_receiverPointer;
            receiverPointer = o2o_receiverPointer == null ? null : o2o_receiverPointer.getObjectId();
            o2o_receiverPointer__resolvedKey = receiverPointer;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<FriendData> getO2m_receiverGroupRelation() {
        if (o2m_receiverGroupRelation == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FriendDataDao targetDao = daoSession.getFriendDataDao();
            List<FriendData> o2m_receiverGroupRelationNew = targetDao._queryMsgData_O2m_receiverGroupRelation(objectId);
            synchronized (this) {
                if(o2m_receiverGroupRelation == null) {
                    o2m_receiverGroupRelation = o2m_receiverGroupRelationNew;
                }
            }
        }
        return o2m_receiverGroupRelation;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetO2m_receiverGroupRelation() {
        o2m_receiverGroupRelation = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
