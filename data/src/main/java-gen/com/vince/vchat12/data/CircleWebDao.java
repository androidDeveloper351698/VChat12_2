package com.vince.vchat12.data;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.vince.vchat12.data.CircleWeb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CIRCLE_WEB".
*/
public class CircleWebDao extends AbstractDao<CircleWeb, String> {

    public static final String TABLENAME = "CIRCLE_WEB";

    /**
     * Properties of entity CircleWeb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property UpdateTime = new Property(1, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
        public final static Property AttachmentLinks = new Property(2, String.class, "attachmentLinks", false, "ATTACHMENT_LINKS");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property OwnerPointer = new Property(4, String.class, "ownerPointer", false, "OWNER_POINTER");
        public final static Property CircleListRelation = new Property(5, String.class, "circleListRelation", false, "CIRCLE_LIST_RELATION");
    };

    private DaoSession daoSession;

    private Query<CircleWeb> userData_O2m_circleListRelationQuery;

    public CircleWebDao(DaoConfig config) {
        super(config);
    }
    
    public CircleWebDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CIRCLE_WEB\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"UPDATE_TIME\" INTEGER," + // 1: updateTime
                "\"ATTACHMENT_LINKS\" TEXT," + // 2: attachmentLinks
                "\"CONTENT\" TEXT," + // 3: content
                "\"OWNER_POINTER\" TEXT," + // 4: ownerPointer
                "\"CIRCLE_LIST_RELATION\" TEXT);"); // 5: circleListRelation
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CIRCLE_WEB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CircleWeb entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(2, updateTime.getTime());
        }
 
        String attachmentLinks = entity.getAttachmentLinks();
        if (attachmentLinks != null) {
            stmt.bindString(3, attachmentLinks);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String ownerPointer = entity.getOwnerPointer();
        if (ownerPointer != null) {
            stmt.bindString(5, ownerPointer);
        }
    }

    @Override
    protected void attachEntity(CircleWeb entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CircleWeb readEntity(Cursor cursor, int offset) {
        CircleWeb entity = new CircleWeb( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // updateTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // attachmentLinks
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // ownerPointer
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CircleWeb entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUpdateTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setAttachmentLinks(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOwnerPointer(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(CircleWeb entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(CircleWeb entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "o2m_circleListRelation" to-many relationship of UserData. */
    public List<CircleWeb> _queryUserData_O2m_circleListRelation(String circleListRelation) {
        synchronized (this) {
            if (userData_O2m_circleListRelationQuery == null) {
                QueryBuilder<CircleWeb> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CircleListRelation.eq(null));
                userData_O2m_circleListRelationQuery = queryBuilder.build();
            }
        }
        Query<CircleWeb> query = userData_O2m_circleListRelationQuery.forCurrentThread();
        query.setParameter(0, circleListRelation);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFriendDataDao().getAllColumns());
            builder.append(" FROM CIRCLE_WEB T");
            builder.append(" LEFT JOIN FRIEND_DATA T0 ON T.\"OWNER_POINTER\"=T0.\"OBJECT_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CircleWeb loadCurrentDeep(Cursor cursor, boolean lock) {
        CircleWeb entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        FriendData o2m_ownerPointer = loadCurrentOther(daoSession.getFriendDataDao(), cursor, offset);
        entity.setO2m_ownerPointer(o2m_ownerPointer);

        return entity;    
    }

    public CircleWeb loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CircleWeb> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CircleWeb> list = new ArrayList<CircleWeb>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CircleWeb> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CircleWeb> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
