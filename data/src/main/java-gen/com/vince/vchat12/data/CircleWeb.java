package com.vince.vchat12.data;

import com.vince.vchat12.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CIRCLE_WEB".
 */
public class CircleWeb {

    private String objectId;
    private java.util.Date updateTime;
    private String attachmentLinks;
    private String content;
    private String ownerPointer;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CircleWebDao myDao;

    private FriendData o2m_ownerPointer;
    private String o2m_ownerPointer__resolvedKey;


    public CircleWeb() {
    }

    public CircleWeb(String objectId) {
        this.objectId = objectId;
    }

    public CircleWeb(String objectId, java.util.Date updateTime, String attachmentLinks, String content, String ownerPointer) {
        this.objectId = objectId;
        this.updateTime = updateTime;
        this.attachmentLinks = attachmentLinks;
        this.content = content;
        this.ownerPointer = ownerPointer;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCircleWebDao() : null;
    }

    public String getObjectId() {
        return objectId;
    }

    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public java.util.Date getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(java.util.Date updateTime) {
        this.updateTime = updateTime;
    }

    public String getAttachmentLinks() {
        return attachmentLinks;
    }

    public void setAttachmentLinks(String attachmentLinks) {
        this.attachmentLinks = attachmentLinks;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getOwnerPointer() {
        return ownerPointer;
    }

    public void setOwnerPointer(String ownerPointer) {
        this.ownerPointer = ownerPointer;
    }

    /** To-one relationship, resolved on first access. */
    public FriendData getO2m_ownerPointer() {
        String __key = this.ownerPointer;
        if (o2m_ownerPointer__resolvedKey == null || o2m_ownerPointer__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FriendDataDao targetDao = daoSession.getFriendDataDao();
            FriendData o2m_ownerPointerNew = targetDao.load(__key);
            synchronized (this) {
                o2m_ownerPointer = o2m_ownerPointerNew;
            	o2m_ownerPointer__resolvedKey = __key;
            }
        }
        return o2m_ownerPointer;
    }

    public void setO2m_ownerPointer(FriendData o2m_ownerPointer) {
        synchronized (this) {
            this.o2m_ownerPointer = o2m_ownerPointer;
            ownerPointer = o2m_ownerPointer == null ? null : o2m_ownerPointer.getObjectId();
            o2m_ownerPointer__resolvedKey = ownerPointer;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
