package com.vince.vchat12.data;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.vince.vchat12.data.FriendData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND_DATA".
*/
public class FriendDataDao extends AbstractDao<FriendData, String> {

    public static final String TABLENAME = "FRIEND_DATA";

    /**
     * Properties of entity FriendData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property Remark = new Property(1, String.class, "remark", false, "REMARK");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property IsStar = new Property(3, Boolean.class, "isStar", false, "IS_STAR");
        public final static Property IsBlack = new Property(4, Boolean.class, "isBlack", false, "IS_BLACK");
        public final static Property IsShieldMyCircle = new Property(5, Boolean.class, "isShieldMyCircle", false, "IS_SHIELD_MY_CIRCLE");
        public final static Property IsBlockHisCircle = new Property(6, Boolean.class, "isBlockHisCircle", false, "IS_BLOCK_HIS_CIRCLE");
        public final static Property AttachmentLinksString = new Property(7, String.class, "attachmentLinksString", false, "ATTACHMENT_LINKS_STRING");
        public final static Property UpdateTime = new Property(8, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
        public final static Property FirstLetter = new Property(9, String.class, "firstLetter", false, "FIRST_LETTER");
        public final static Property GroupPointer = new Property(10, String.class, "groupPointer", false, "GROUP_POINTER");
        public final static Property TargetUserPointer = new Property(11, String.class, "targetUserPointer", false, "TARGET_USER_POINTER");
        public final static Property ContactsRelation = new Property(12, String.class, "contactsRelation", false, "CONTACTS_RELATION");
        public final static Property ReceiverGroupRelation = new Property(13, String.class, "receiverGroupRelation", false, "RECEIVER_GROUP_RELATION");
        public final static Property ReceiverGroupRelation2 = new Property(14, String.class, "receiverGroupRelation2", false, "RECEIVER_GROUP_RELATION2");
    };

    private DaoSession daoSession;

    private Query<FriendData> userData_O2m_contactsRelationQuery;
    private Query<FriendData> msgData_O2m_receiverGroupRelationQuery;
    private Query<FriendData> dialogueData_O2m_receiverGroupRelation2Query;

    public FriendDataDao(DaoConfig config) {
        super(config);
    }
    
    public FriendDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND_DATA\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"REMARK\" TEXT," + // 1: remark
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"IS_STAR\" INTEGER," + // 3: isStar
                "\"IS_BLACK\" INTEGER," + // 4: isBlack
                "\"IS_SHIELD_MY_CIRCLE\" INTEGER," + // 5: isShieldMyCircle
                "\"IS_BLOCK_HIS_CIRCLE\" INTEGER," + // 6: isBlockHisCircle
                "\"ATTACHMENT_LINKS_STRING\" TEXT," + // 7: attachmentLinksString
                "\"UPDATE_TIME\" INTEGER," + // 8: updateTime
                "\"FIRST_LETTER\" TEXT," + // 9: firstLetter
                "\"GROUP_POINTER\" TEXT," + // 10: groupPointer
                "\"TARGET_USER_POINTER\" TEXT," + // 11: targetUserPointer
                "\"CONTACTS_RELATION\" TEXT," + // 12: contactsRelation
                "\"RECEIVER_GROUP_RELATION\" TEXT," + // 13: receiverGroupRelation
                "\"RECEIVER_GROUP_RELATION2\" TEXT);"); // 14: receiverGroupRelation2
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FriendData entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(2, remark);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        Boolean isStar = entity.getIsStar();
        if (isStar != null) {
            stmt.bindLong(4, isStar ? 1L: 0L);
        }
 
        Boolean isBlack = entity.getIsBlack();
        if (isBlack != null) {
            stmt.bindLong(5, isBlack ? 1L: 0L);
        }
 
        Boolean isShieldMyCircle = entity.getIsShieldMyCircle();
        if (isShieldMyCircle != null) {
            stmt.bindLong(6, isShieldMyCircle ? 1L: 0L);
        }
 
        Boolean isBlockHisCircle = entity.getIsBlockHisCircle();
        if (isBlockHisCircle != null) {
            stmt.bindLong(7, isBlockHisCircle ? 1L: 0L);
        }
 
        String attachmentLinksString = entity.getAttachmentLinksString();
        if (attachmentLinksString != null) {
            stmt.bindString(8, attachmentLinksString);
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(9, updateTime.getTime());
        }
 
        String firstLetter = entity.getFirstLetter();
        if (firstLetter != null) {
            stmt.bindString(10, firstLetter);
        }
 
        String groupPointer = entity.getGroupPointer();
        if (groupPointer != null) {
            stmt.bindString(11, groupPointer);
        }
 
        String targetUserPointer = entity.getTargetUserPointer();
        if (targetUserPointer != null) {
            stmt.bindString(12, targetUserPointer);
        }
    }

    @Override
    protected void attachEntity(FriendData entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FriendData readEntity(Cursor cursor, int offset) {
        FriendData entity = new FriendData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // remark
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isStar
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isBlack
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isShieldMyCircle
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isBlockHisCircle
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // attachmentLinksString
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // updateTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // firstLetter
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // groupPointer
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // targetUserPointer
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FriendData entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRemark(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsStar(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setIsBlack(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setIsShieldMyCircle(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setIsBlockHisCircle(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setAttachmentLinksString(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdateTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setFirstLetter(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGroupPointer(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTargetUserPointer(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(FriendData entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(FriendData entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "o2m_contactsRelation" to-many relationship of UserData. */
    public List<FriendData> _queryUserData_O2m_contactsRelation(String contactsRelation) {
        synchronized (this) {
            if (userData_O2m_contactsRelationQuery == null) {
                QueryBuilder<FriendData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ContactsRelation.eq(null));
                userData_O2m_contactsRelationQuery = queryBuilder.build();
            }
        }
        Query<FriendData> query = userData_O2m_contactsRelationQuery.forCurrentThread();
        query.setParameter(0, contactsRelation);
        return query.list();
    }

    /** Internal query to resolve the "o2m_receiverGroupRelation" to-many relationship of MsgData. */
    public List<FriendData> _queryMsgData_O2m_receiverGroupRelation(String receiverGroupRelation) {
        synchronized (this) {
            if (msgData_O2m_receiverGroupRelationQuery == null) {
                QueryBuilder<FriendData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ReceiverGroupRelation.eq(null));
                msgData_O2m_receiverGroupRelationQuery = queryBuilder.build();
            }
        }
        Query<FriendData> query = msgData_O2m_receiverGroupRelationQuery.forCurrentThread();
        query.setParameter(0, receiverGroupRelation);
        return query.list();
    }

    /** Internal query to resolve the "o2m_receiverGroupRelation2" to-many relationship of DialogueData. */
    public List<FriendData> _queryDialogueData_O2m_receiverGroupRelation2(String receiverGroupRelation2) {
        synchronized (this) {
            if (dialogueData_O2m_receiverGroupRelation2Query == null) {
                QueryBuilder<FriendData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ReceiverGroupRelation2.eq(null));
                dialogueData_O2m_receiverGroupRelation2Query = queryBuilder.build();
            }
        }
        Query<FriendData> query = dialogueData_O2m_receiverGroupRelation2Query.forCurrentThread();
        query.setParameter(0, receiverGroupRelation2);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGroupDataDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDataDao().getAllColumns());
            builder.append(" FROM FRIEND_DATA T");
            builder.append(" LEFT JOIN GROUP_DATA T0 ON T.\"GROUP_POINTER\"=T0.\"OBJECT_ID\"");
            builder.append(" LEFT JOIN USER_DATA T1 ON T.\"TARGET_USER_POINTER\"=T1.\"OBJECT_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected FriendData loadCurrentDeep(Cursor cursor, boolean lock) {
        FriendData entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        GroupData o2o_groupPointer = loadCurrentOther(daoSession.getGroupDataDao(), cursor, offset);
        entity.setO2o_groupPointer(o2o_groupPointer);
        offset += daoSession.getGroupDataDao().getAllColumns().length;

        UserData o2o_targetUserPointer = loadCurrentOther(daoSession.getUserDataDao(), cursor, offset);
        entity.setO2o_targetUserPointer(o2o_targetUserPointer);

        return entity;    
    }

    public FriendData loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<FriendData> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<FriendData> list = new ArrayList<FriendData>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<FriendData> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<FriendData> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
