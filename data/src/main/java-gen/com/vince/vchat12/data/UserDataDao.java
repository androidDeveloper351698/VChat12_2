package com.vince.vchat12.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vince.vchat12.data.UserData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DATA".
*/
public class UserDataDao extends AbstractDao<UserData, String> {

    public static final String TABLENAME = "USER_DATA";

    /**
     * Properties of entity UserData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Nick = new Property(3, String.class, "nick", false, "NICK");
        public final static Property Barcode2D = new Property(4, String.class, "barcode2D", false, "BARCODE2_D");
        public final static Property IsMale = new Property(5, Boolean.class, "isMale", false, "IS_MALE");
        public final static Property Signature = new Property(6, String.class, "signature", false, "SIGNATURE");
        public final static Property Address = new Property(7, String.class, "address", false, "ADDRESS");
        public final static Property AvatarLink = new Property(8, String.class, "avatarLink", false, "AVATAR_LINK");
        public final static Property CreateTime = new Property(9, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(10, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
        public final static Property ContactsRelation = new Property(11, String.class, "contactsRelation", false, "CONTACTS_RELATION");
        public final static Property CircleListRelation = new Property(12, String.class, "circleListRelation", false, "CIRCLE_LIST_RELATION");
    };

    private DaoSession daoSession;


    public UserDataDao(DaoConfig config) {
        super(config);
    }
    
    public UserDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DATA\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"USERNAME\" TEXT NOT NULL ," + // 1: username
                "\"PASSWORD\" TEXT," + // 2: password
                "\"NICK\" TEXT," + // 3: nick
                "\"BARCODE2_D\" TEXT," + // 4: barcode2D
                "\"IS_MALE\" INTEGER," + // 5: isMale
                "\"SIGNATURE\" TEXT," + // 6: signature
                "\"ADDRESS\" TEXT," + // 7: address
                "\"AVATAR_LINK\" TEXT," + // 8: avatarLink
                "\"CREATE_TIME\" INTEGER," + // 9: createTime
                "\"UPDATE_TIME\" INTEGER," + // 10: updateTime
                "\"CONTACTS_RELATION\" TEXT," + // 11: contactsRelation
                "\"CIRCLE_LIST_RELATION\" TEXT);"); // 12: circleListRelation
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserData entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
        stmt.bindString(2, entity.getUsername());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(4, nick);
        }
 
        String barcode2D = entity.getBarcode2D();
        if (barcode2D != null) {
            stmt.bindString(5, barcode2D);
        }
 
        Boolean isMale = entity.getIsMale();
        if (isMale != null) {
            stmt.bindLong(6, isMale ? 1L: 0L);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(7, signature);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        String avatarLink = entity.getAvatarLink();
        if (avatarLink != null) {
            stmt.bindString(9, avatarLink);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(10, createTime.getTime());
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(11, updateTime.getTime());
        }
 
        String contactsRelation = entity.getContactsRelation();
        if (contactsRelation != null) {
            stmt.bindString(12, contactsRelation);
        }
 
        String circleListRelation = entity.getCircleListRelation();
        if (circleListRelation != null) {
            stmt.bindString(13, circleListRelation);
        }
    }

    @Override
    protected void attachEntity(UserData entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserData readEntity(Cursor cursor, int offset) {
        UserData entity = new UserData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nick
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // barcode2D
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isMale
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // signature
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // address
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // avatarLink
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // createTime
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // updateTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // contactsRelation
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // circleListRelation
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserData entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsername(cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNick(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBarcode2D(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsMale(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setSignature(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAvatarLink(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateTime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setUpdateTime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setContactsRelation(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCircleListRelation(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(UserData entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(UserData entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
