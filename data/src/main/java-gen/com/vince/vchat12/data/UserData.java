package com.vince.vchat12.data;

import java.util.List;
import com.vince.vchat12.data.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "USER_DATA".
 */
public class UserData {

    private String objectId;
    /** Not-null value. */
    private String username;
    private String password;
    private String nick;
    private String barcode2D;
    private Boolean isMale;
    private String signature;
    private String address;
    private String avatarLink;
    private java.util.Date createTime;
    private java.util.Date updateTime;
    private String contactsRelation;
    private String circleListRelation;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDataDao myDao;

    private List<FriendData> o2m_contactsRelation;
    private List<CircleWeb> o2m_circleListRelation;

    public UserData() {
    }

    public UserData(String objectId) {
        this.objectId = objectId;
    }

    public UserData(String objectId, String username, String password, String nick, String barcode2D, Boolean isMale, String signature, String address, String avatarLink, java.util.Date createTime, java.util.Date updateTime, String contactsRelation, String circleListRelation) {
        this.objectId = objectId;
        this.username = username;
        this.password = password;
        this.nick = nick;
        this.barcode2D = barcode2D;
        this.isMale = isMale;
        this.signature = signature;
        this.address = address;
        this.avatarLink = avatarLink;
        this.createTime = createTime;
        this.updateTime = updateTime;
        this.contactsRelation = contactsRelation;
        this.circleListRelation = circleListRelation;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDataDao() : null;
    }

    public String getObjectId() {
        return objectId;
    }

    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    /** Not-null value. */
    public String getUsername() {
        return username;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getNick() {
        return nick;
    }

    public void setNick(String nick) {
        this.nick = nick;
    }

    public String getBarcode2D() {
        return barcode2D;
    }

    public void setBarcode2D(String barcode2D) {
        this.barcode2D = barcode2D;
    }

    public Boolean getIsMale() {
        return isMale;
    }

    public void setIsMale(Boolean isMale) {
        this.isMale = isMale;
    }

    public String getSignature() {
        return signature;
    }

    public void setSignature(String signature) {
        this.signature = signature;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getAvatarLink() {
        return avatarLink;
    }

    public void setAvatarLink(String avatarLink) {
        this.avatarLink = avatarLink;
    }

    public java.util.Date getCreateTime() {
        return createTime;
    }

    public void setCreateTime(java.util.Date createTime) {
        this.createTime = createTime;
    }

    public java.util.Date getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(java.util.Date updateTime) {
        this.updateTime = updateTime;
    }

    public String getContactsRelation() {
        return contactsRelation;
    }

    public void setContactsRelation(String contactsRelation) {
        this.contactsRelation = contactsRelation;
    }

    public String getCircleListRelation() {
        return circleListRelation;
    }

    public void setCircleListRelation(String circleListRelation) {
        this.circleListRelation = circleListRelation;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<FriendData> getO2m_contactsRelation() {
        if (o2m_contactsRelation == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FriendDataDao targetDao = daoSession.getFriendDataDao();
            List<FriendData> o2m_contactsRelationNew = targetDao._queryUserData_O2m_contactsRelation(objectId);
            synchronized (this) {
                if(o2m_contactsRelation == null) {
                    o2m_contactsRelation = o2m_contactsRelationNew;
                }
            }
        }
        return o2m_contactsRelation;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetO2m_contactsRelation() {
        o2m_contactsRelation = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CircleWeb> getO2m_circleListRelation() {
        if (o2m_circleListRelation == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CircleWebDao targetDao = daoSession.getCircleWebDao();
            List<CircleWeb> o2m_circleListRelationNew = targetDao._queryUserData_O2m_circleListRelation(objectId);
            synchronized (this) {
                if(o2m_circleListRelation == null) {
                    o2m_circleListRelation = o2m_circleListRelationNew;
                }
            }
        }
        return o2m_circleListRelation;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetO2m_circleListRelation() {
        o2m_circleListRelation = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
