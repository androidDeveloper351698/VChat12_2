package com.vince.vchat12.data;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.vince.vchat12.data.DialogueData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIALOGUE_DATA".
*/
public class DialogueDataDao extends AbstractDao<DialogueData, String> {

    public static final String TABLENAME = "DIALOGUE_DATA";

    /**
     * Properties of entity DialogueData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property UpdateTime = new Property(1, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
        public final static Property IsGroupChat = new Property(2, Boolean.class, "isGroupChat", false, "IS_GROUP_CHAT");
        public final static Property LastMsgSegment = new Property(3, String.class, "lastMsgSegment", false, "LAST_MSG_SEGMENT");
        public final static Property AvatarLink = new Property(4, String.class, "avatarLink", false, "AVATAR_LINK");
        public final static Property GroupName = new Property(5, String.class, "groupName", false, "GROUP_NAME");
        public final static Property TargetFriendPointer = new Property(6, String.class, "targetFriendPointer", false, "TARGET_FRIEND_POINTER");
        public final static Property ReceiverGroupRelation2 = new Property(7, String.class, "receiverGroupRelation2", false, "RECEIVER_GROUP_RELATION2");
        public final static Property MsgListRelation = new Property(8, String.class, "msgListRelation", false, "MSG_LIST_RELATION");
    };

    private DaoSession daoSession;


    public DialogueDataDao(DaoConfig config) {
        super(config);
    }
    
    public DialogueDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIALOGUE_DATA\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"UPDATE_TIME\" INTEGER," + // 1: updateTime
                "\"IS_GROUP_CHAT\" INTEGER," + // 2: isGroupChat
                "\"LAST_MSG_SEGMENT\" TEXT," + // 3: lastMsgSegment
                "\"AVATAR_LINK\" TEXT," + // 4: avatarLink
                "\"GROUP_NAME\" TEXT," + // 5: groupName
                "\"TARGET_FRIEND_POINTER\" TEXT," + // 6: targetFriendPointer
                "\"RECEIVER_GROUP_RELATION2\" TEXT," + // 7: receiverGroupRelation2
                "\"MSG_LIST_RELATION\" TEXT);"); // 8: msgListRelation
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIALOGUE_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DialogueData entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(2, updateTime.getTime());
        }
 
        Boolean isGroupChat = entity.getIsGroupChat();
        if (isGroupChat != null) {
            stmt.bindLong(3, isGroupChat ? 1L: 0L);
        }
 
        String lastMsgSegment = entity.getLastMsgSegment();
        if (lastMsgSegment != null) {
            stmt.bindString(4, lastMsgSegment);
        }
 
        String avatarLink = entity.getAvatarLink();
        if (avatarLink != null) {
            stmt.bindString(5, avatarLink);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(6, groupName);
        }
 
        String targetFriendPointer = entity.getTargetFriendPointer();
        if (targetFriendPointer != null) {
            stmt.bindString(7, targetFriendPointer);
        }
 
        String receiverGroupRelation2 = entity.getReceiverGroupRelation2();
        if (receiverGroupRelation2 != null) {
            stmt.bindString(8, receiverGroupRelation2);
        }
 
        String msgListRelation = entity.getMsgListRelation();
        if (msgListRelation != null) {
            stmt.bindString(9, msgListRelation);
        }
    }

    @Override
    protected void attachEntity(DialogueData entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DialogueData readEntity(Cursor cursor, int offset) {
        DialogueData entity = new DialogueData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // updateTime
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isGroupChat
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lastMsgSegment
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatarLink
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // groupName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // targetFriendPointer
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // receiverGroupRelation2
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // msgListRelation
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DialogueData entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUpdateTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setIsGroupChat(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setLastMsgSegment(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatarLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGroupName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTargetFriendPointer(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReceiverGroupRelation2(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMsgListRelation(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DialogueData entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DialogueData entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFriendDataDao().getAllColumns());
            builder.append(" FROM DIALOGUE_DATA T");
            builder.append(" LEFT JOIN FRIEND_DATA T0 ON T.\"TARGET_FRIEND_POINTER\"=T0.\"OBJECT_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DialogueData loadCurrentDeep(Cursor cursor, boolean lock) {
        DialogueData entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        FriendData o2o_targetFriendPointer = loadCurrentOther(daoSession.getFriendDataDao(), cursor, offset);
        entity.setO2o_targetFriendPointer(o2o_targetFriendPointer);

        return entity;    
    }

    public DialogueData loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DialogueData> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DialogueData> list = new ArrayList<DialogueData>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DialogueData> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DialogueData> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
