package com.vince.vchat12.data;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.vince.vchat12.data.MsgData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG_DATA".
*/
public class MsgDataDao extends AbstractDao<MsgData, String> {

    public static final String TABLENAME = "MSG_DATA";

    /**
     * Properties of entity MsgData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property Type = new Property(1, Integer.class, "type", false, "TYPE");
        public final static Property Status = new Property(2, Integer.class, "status", false, "STATUS");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property AttachmentLink = new Property(4, String.class, "attachmentLink", false, "ATTACHMENT_LINK");
        public final static Property IsGroupChat = new Property(5, Boolean.class, "isGroupChat", false, "IS_GROUP_CHAT");
        public final static Property UpdateTime = new Property(6, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
        public final static Property SenderPointer = new Property(7, String.class, "senderPointer", false, "SENDER_POINTER");
        public final static Property ReceiverPointer = new Property(8, String.class, "receiverPointer", false, "RECEIVER_POINTER");
        public final static Property ReceiverGroupRelation = new Property(9, String.class, "receiverGroupRelation", false, "RECEIVER_GROUP_RELATION");
        public final static Property MsgListRelation = new Property(10, String.class, "msgListRelation", false, "MSG_LIST_RELATION");
    };

    private DaoSession daoSession;

    private Query<MsgData> dialogueData_O2m_msgListRelationQuery;

    public MsgDataDao(DaoConfig config) {
        super(config);
    }
    
    public MsgDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG_DATA\" (" + //
                "\"OBJECT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "\"TYPE\" INTEGER," + // 1: type
                "\"STATUS\" INTEGER," + // 2: status
                "\"CONTENT\" TEXT," + // 3: content
                "\"ATTACHMENT_LINK\" TEXT," + // 4: attachmentLink
                "\"IS_GROUP_CHAT\" INTEGER," + // 5: isGroupChat
                "\"UPDATE_TIME\" INTEGER," + // 6: updateTime
                "\"SENDER_POINTER\" TEXT," + // 7: senderPointer
                "\"RECEIVER_POINTER\" TEXT," + // 8: receiverPointer
                "\"RECEIVER_GROUP_RELATION\" TEXT," + // 9: receiverGroupRelation
                "\"MSG_LIST_RELATION\" TEXT);"); // 10: msgListRelation
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MsgData entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(3, status);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String attachmentLink = entity.getAttachmentLink();
        if (attachmentLink != null) {
            stmt.bindString(5, attachmentLink);
        }
 
        Boolean isGroupChat = entity.getIsGroupChat();
        if (isGroupChat != null) {
            stmt.bindLong(6, isGroupChat ? 1L: 0L);
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(7, updateTime.getTime());
        }
 
        String senderPointer = entity.getSenderPointer();
        if (senderPointer != null) {
            stmt.bindString(8, senderPointer);
        }
 
        String receiverPointer = entity.getReceiverPointer();
        if (receiverPointer != null) {
            stmt.bindString(9, receiverPointer);
        }
 
        String receiverGroupRelation = entity.getReceiverGroupRelation();
        if (receiverGroupRelation != null) {
            stmt.bindString(10, receiverGroupRelation);
        }
    }

    @Override
    protected void attachEntity(MsgData entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MsgData readEntity(Cursor cursor, int offset) {
        MsgData entity = new MsgData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // attachmentLink
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isGroupChat
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // updateTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // senderPointer
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // receiverPointer
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // receiverGroupRelation
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MsgData entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setStatus(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAttachmentLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsGroupChat(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setUpdateTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setSenderPointer(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setReceiverPointer(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReceiverGroupRelation(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MsgData entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MsgData entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "o2m_msgListRelation" to-many relationship of DialogueData. */
    public List<MsgData> _queryDialogueData_O2m_msgListRelation(String msgListRelation) {
        synchronized (this) {
            if (dialogueData_O2m_msgListRelationQuery == null) {
                QueryBuilder<MsgData> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MsgListRelation.eq(null));
                dialogueData_O2m_msgListRelationQuery = queryBuilder.build();
            }
        }
        Query<MsgData> query = dialogueData_O2m_msgListRelationQuery.forCurrentThread();
        query.setParameter(0, msgListRelation);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFriendDataDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getFriendDataDao().getAllColumns());
            builder.append(" FROM MSG_DATA T");
            builder.append(" LEFT JOIN FRIEND_DATA T0 ON T.\"SENDER_POINTER\"=T0.\"OBJECT_ID\"");
            builder.append(" LEFT JOIN FRIEND_DATA T1 ON T.\"RECEIVER_POINTER\"=T1.\"OBJECT_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MsgData loadCurrentDeep(Cursor cursor, boolean lock) {
        MsgData entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        FriendData o2o_senderPointer = loadCurrentOther(daoSession.getFriendDataDao(), cursor, offset);
        entity.setO2o_senderPointer(o2o_senderPointer);
        offset += daoSession.getFriendDataDao().getAllColumns().length;

        FriendData o2o_receiverPointer = loadCurrentOther(daoSession.getFriendDataDao(), cursor, offset);
        entity.setO2o_receiverPointer(o2o_receiverPointer);

        return entity;    
    }

    public MsgData loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MsgData> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MsgData> list = new ArrayList<MsgData>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MsgData> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MsgData> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
